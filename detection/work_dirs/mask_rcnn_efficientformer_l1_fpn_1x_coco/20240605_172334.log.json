{"env_info": "sys.platform: linux\nPython: 3.10.0 (default, Mar  3 2022, 09:58:08) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda-12.2\nNVCC: Cuda compilation tools, release 12.2, V12.2.140\nGCC: gcc (Ubuntu 12.3.0-1ubuntu1~22.04) 12.3.0\nPyTorch: 1.12.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.0+cu113\nOpenCV: 4.9.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.25.1+4bb7153", "config": "model = dict(\n    type='MaskRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='efficientformer_l1_feat',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='../weights/efficientformer_l1_300d.pth')),\n    neck=dict(\n        type='FPN',\n        in_channels=[48, 96, 224, 448],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=80,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=1e-06,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/mask_rcnn_efficientformer_l1_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 4)\n", "seed": 0, "exp_name": "mask_rcnn_efficientformer_l1_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 2e-05, "memory": 19844, "data_time": 0.43881, "loss_rpn_cls": 0.61343, "loss_rpn_bbox": 0.10507, "loss_cls": 2.12465, "acc": 71.32678, "loss_bbox": 0.04985, "loss_mask": 0.80319, "loss": 3.69619, "time": 1.6062}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 4e-05, "memory": 19844, "data_time": 0.31116, "loss_rpn_cls": 0.2867, "loss_rpn_bbox": 0.10199, "loss_cls": 0.50933, "acc": 94.03711, "loss_bbox": 0.20246, "loss_mask": 0.6992, "loss": 1.79968, "time": 1.14607}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 6e-05, "memory": 19844, "data_time": 0.30183, "loss_rpn_cls": 0.19326, "loss_rpn_bbox": 0.09717, "loss_cls": 0.41387, "acc": 93.85046, "loss_bbox": 0.20957, "loss_mask": 0.67419, "loss": 1.58807, "time": 1.11283}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 8e-05, "memory": 19844, "data_time": 0.24026, "loss_rpn_cls": 0.15571, "loss_rpn_bbox": 0.09126, "loss_cls": 0.38894, "acc": 93.86829, "loss_bbox": 0.21092, "loss_mask": 0.63924, "loss": 1.48606, "time": 1.07933}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0001, "memory": 19844, "data_time": 0.25407, "loss_rpn_cls": 0.1356, "loss_rpn_bbox": 0.09402, "loss_cls": 0.40226, "acc": 93.151, "loss_bbox": 0.24214, "loss_mask": 0.59442, "loss": 1.46845, "time": 1.06991}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00012, "memory": 19844, "data_time": 0.24149, "loss_rpn_cls": 0.11594, "loss_rpn_bbox": 0.08926, "loss_cls": 0.46097, "acc": 91.57263, "loss_bbox": 0.31041, "loss_mask": 0.5423, "loss": 1.51888, "time": 1.0841}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00014, "memory": 19844, "data_time": 0.22808, "loss_rpn_cls": 0.09871, "loss_rpn_bbox": 0.09114, "loss_cls": 0.46367, "acc": 91.1167, "loss_bbox": 0.3272, "loss_mask": 0.50017, "loss": 1.48089, "time": 1.0971}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00016, "memory": 19844, "data_time": 0.25922, "loss_rpn_cls": 0.09214, "loss_rpn_bbox": 0.08445, "loss_cls": 0.46306, "acc": 90.42151, "loss_bbox": 0.34618, "loss_mask": 0.4714, "loss": 1.45724, "time": 1.0885}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00018, "memory": 19844, "data_time": 0.28538, "loss_rpn_cls": 0.0874, "loss_rpn_bbox": 0.0834, "loss_cls": 0.45356, "acc": 89.97998, "loss_bbox": 0.35133, "loss_mask": 0.45076, "loss": 1.42646, "time": 1.1344}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0002, "memory": 19844, "data_time": 0.35234, "loss_rpn_cls": 0.08136, "loss_rpn_bbox": 0.08313, "loss_cls": 0.42986, "acc": 89.86304, "loss_bbox": 0.36116, "loss_mask": 0.43824, "loss": 1.39375, "time": 1.41161}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0002, "memory": 19844, "data_time": 0.23866, "loss_rpn_cls": 0.07906, "loss_rpn_bbox": 0.0797, "loss_cls": 0.39736, "acc": 90.23059, "loss_bbox": 0.34818, "loss_mask": 0.4253, "loss": 1.32959, "time": 1.08196}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0002, "memory": 19844, "data_time": 0.26754, "loss_rpn_cls": 0.07493, "loss_rpn_bbox": 0.08053, "loss_cls": 0.39225, "acc": 89.84143, "loss_bbox": 0.35768, "loss_mask": 0.40661, "loss": 1.312, "time": 1.11014}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0002, "memory": 19844, "data_time": 0.26803, "loss_rpn_cls": 0.07718, "loss_rpn_bbox": 0.07952, "loss_cls": 0.37474, "acc": 89.9469, "loss_bbox": 0.35224, "loss_mask": 0.40155, "loss": 1.28523, "time": 1.15606}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0002, "memory": 19844, "data_time": 0.24172, "loss_rpn_cls": 0.07078, "loss_rpn_bbox": 0.07709, "loss_cls": 0.36519, "acc": 90.08191, "loss_bbox": 0.34537, "loss_mask": 0.39418, "loss": 1.25261, "time": 1.0893}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0002, "memory": 19844, "data_time": 0.25376, "loss_rpn_cls": 0.07146, "loss_rpn_bbox": 0.07767, "loss_cls": 0.36542, "acc": 89.8053, "loss_bbox": 0.35964, "loss_mask": 0.38406, "loss": 1.25825, "time": 1.1392}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0002, "memory": 19844, "data_time": 0.26474, "loss_rpn_cls": 0.07051, "loss_rpn_bbox": 0.07766, "loss_cls": 0.35406, "acc": 89.93213, "loss_bbox": 0.34739, "loss_mask": 0.3788, "loss": 1.22841, "time": 1.12104}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0002, "memory": 19844, "data_time": 0.2502, "loss_rpn_cls": 0.06824, "loss_rpn_bbox": 0.07429, "loss_cls": 0.35419, "acc": 89.83667, "loss_bbox": 0.35002, "loss_mask": 0.37711, "loss": 1.22385, "time": 1.10503}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0002, "memory": 19844, "data_time": 0.23606, "loss_rpn_cls": 0.06624, "loss_rpn_bbox": 0.07711, "loss_cls": 0.34004, "acc": 90.24756, "loss_bbox": 0.3387, "loss_mask": 0.37329, "loss": 1.19537, "time": 1.07874}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0002, "memory": 19844, "data_time": 0.23756, "loss_rpn_cls": 0.06885, "loss_rpn_bbox": 0.07743, "loss_cls": 0.34541, "acc": 89.92957, "loss_bbox": 0.34876, "loss_mask": 0.37249, "loss": 1.21295, "time": 1.0997}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0002, "memory": 19844, "data_time": 0.24044, "loss_rpn_cls": 0.06716, "loss_rpn_bbox": 0.07236, "loss_cls": 0.32843, "acc": 90.35596, "loss_bbox": 0.33137, "loss_mask": 0.36067, "loss": 1.15999, "time": 1.06415}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0002, "memory": 19844, "data_time": 0.26262, "loss_rpn_cls": 0.06757, "loss_rpn_bbox": 0.07726, "loss_cls": 0.33812, "acc": 89.94678, "loss_bbox": 0.342, "loss_mask": 0.36444, "loss": 1.18939, "time": 1.10893}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0002, "memory": 19844, "data_time": 0.2498, "loss_rpn_cls": 0.06842, "loss_rpn_bbox": 0.07428, "loss_cls": 0.33139, "acc": 90.25781, "loss_bbox": 0.32973, "loss_mask": 0.35894, "loss": 1.16277, "time": 1.10904}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0002, "memory": 19844, "data_time": 0.23318, "loss_rpn_cls": 0.06313, "loss_rpn_bbox": 0.07102, "loss_cls": 0.31874, "acc": 90.51147, "loss_bbox": 0.32522, "loss_mask": 0.3546, "loss": 1.13271, "time": 1.06703}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.0002, "memory": 19844, "data_time": 0.22391, "loss_rpn_cls": 0.06051, "loss_rpn_bbox": 0.07293, "loss_cls": 0.32196, "acc": 90.32349, "loss_bbox": 0.33112, "loss_mask": 0.35485, "loss": 1.14138, "time": 1.06366}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0002, "memory": 19844, "data_time": 0.22105, "loss_rpn_cls": 0.06291, "loss_rpn_bbox": 0.0729, "loss_cls": 0.31233, "acc": 90.58618, "loss_bbox": 0.32839, "loss_mask": 0.35423, "loss": 1.13076, "time": 1.06994}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.0002, "memory": 19844, "data_time": 0.24015, "loss_rpn_cls": 0.06261, "loss_rpn_bbox": 0.07114, "loss_cls": 0.31981, "acc": 90.19714, "loss_bbox": 0.33895, "loss_mask": 0.34918, "loss": 1.1417, "time": 1.07159}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.0002, "memory": 19844, "data_time": 0.23449, "loss_rpn_cls": 0.06539, "loss_rpn_bbox": 0.07533, "loss_cls": 0.32108, "acc": 90.19092, "loss_bbox": 0.33549, "loss_mask": 0.35297, "loss": 1.15026, "time": 1.0929}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.0002, "memory": 19844, "data_time": 0.25067, "loss_rpn_cls": 0.06308, "loss_rpn_bbox": 0.07136, "loss_cls": 0.31639, "acc": 90.34802, "loss_bbox": 0.32829, "loss_mask": 0.34706, "loss": 1.12617, "time": 1.06939}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0002, "memory": 19844, "data_time": 0.22706, "loss_rpn_cls": 0.05946, "loss_rpn_bbox": 0.0678, "loss_cls": 0.30131, "acc": 90.82568, "loss_bbox": 0.31481, "loss_mask": 0.34133, "loss": 1.08471, "time": 1.05563}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.0002, "memory": 19844, "data_time": 0.29002, "loss_rpn_cls": 0.06115, "loss_rpn_bbox": 0.07286, "loss_cls": 0.322, "acc": 90.04163, "loss_bbox": 0.33772, "loss_mask": 0.34602, "loss": 1.13975, "time": 1.08621}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.0002, "memory": 19844, "data_time": 0.27343, "loss_rpn_cls": 0.06213, "loss_rpn_bbox": 0.07348, "loss_cls": 0.30942, "acc": 90.52979, "loss_bbox": 0.329, "loss_mask": 0.34647, "loss": 1.1205, "time": 1.09173}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.0002, "memory": 19844, "data_time": 0.23451, "loss_rpn_cls": 0.0611, "loss_rpn_bbox": 0.07069, "loss_cls": 0.31276, "acc": 90.41821, "loss_bbox": 0.32778, "loss_mask": 0.34106, "loss": 1.11339, "time": 1.09702}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.0002, "memory": 19844, "data_time": 0.26184, "loss_rpn_cls": 0.06068, "loss_rpn_bbox": 0.07132, "loss_cls": 0.31487, "acc": 90.21716, "loss_bbox": 0.32796, "loss_mask": 0.33459, "loss": 1.10943, "time": 1.07596}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.0002, "memory": 19844, "data_time": 0.24242, "loss_rpn_cls": 0.06138, "loss_rpn_bbox": 0.0717, "loss_cls": 0.30598, "acc": 90.49939, "loss_bbox": 0.32413, "loss_mask": 0.3358, "loss": 1.09899, "time": 1.08741}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.0002, "memory": 19844, "data_time": 0.25175, "loss_rpn_cls": 0.05883, "loss_rpn_bbox": 0.07158, "loss_cls": 0.30757, "acc": 90.47021, "loss_bbox": 0.32149, "loss_mask": 0.33595, "loss": 1.09542, "time": 1.09503}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.0002, "memory": 19844, "data_time": 0.25636, "loss_rpn_cls": 0.0591, "loss_rpn_bbox": 0.06934, "loss_cls": 0.30399, "acc": 90.52649, "loss_bbox": 0.32452, "loss_mask": 0.33829, "loss": 1.09524, "time": 1.11144}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.0002, "memory": 19844, "data_time": 0.25373, "loss_rpn_cls": 0.05674, "loss_rpn_bbox": 0.07087, "loss_cls": 0.30259, "acc": 90.49976, "loss_bbox": 0.32416, "loss_mask": 0.33557, "loss": 1.08993, "time": 1.06513}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.0002, "memory": 19844, "data_time": 0.23611, "loss_rpn_cls": 0.05692, "loss_rpn_bbox": 0.06822, "loss_cls": 0.29902, "acc": 90.64429, "loss_bbox": 0.31798, "loss_mask": 0.33737, "loss": 1.07951, "time": 1.04713}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.0002, "memory": 19844, "data_time": 0.2455, "loss_rpn_cls": 0.05606, "loss_rpn_bbox": 0.06823, "loss_cls": 0.29891, "acc": 90.58667, "loss_bbox": 0.32236, "loss_mask": 0.33041, "loss": 1.07597, "time": 1.06228}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.0002, "memory": 19844, "data_time": 0.27261, "loss_rpn_cls": 0.06116, "loss_rpn_bbox": 0.07307, "loss_cls": 0.30874, "acc": 90.1897, "loss_bbox": 0.33466, "loss_mask": 0.33516, "loss": 1.11279, "time": 1.09955}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.0002, "memory": 19844, "data_time": 0.26345, "loss_rpn_cls": 0.05798, "loss_rpn_bbox": 0.07005, "loss_cls": 0.3013, "acc": 90.54004, "loss_bbox": 0.31993, "loss_mask": 0.33222, "loss": 1.08149, "time": 1.06674}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.0002, "memory": 19844, "data_time": 0.23483, "loss_rpn_cls": 0.05771, "loss_rpn_bbox": 0.06926, "loss_cls": 0.29947, "acc": 90.61011, "loss_bbox": 0.31963, "loss_mask": 0.33118, "loss": 1.07724, "time": 1.04911}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.0002, "memory": 19844, "data_time": 0.22638, "loss_rpn_cls": 0.05436, "loss_rpn_bbox": 0.06825, "loss_cls": 0.28869, "acc": 90.77136, "loss_bbox": 0.31543, "loss_mask": 0.32962, "loss": 1.05634, "time": 1.0764}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.0002, "memory": 19844, "data_time": 0.23863, "loss_rpn_cls": 0.05571, "loss_rpn_bbox": 0.06743, "loss_cls": 0.29338, "acc": 90.74097, "loss_bbox": 0.31535, "loss_mask": 0.32728, "loss": 1.05915, "time": 1.06635}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.0002, "memory": 19844, "data_time": 0.24613, "loss_rpn_cls": 0.05904, "loss_rpn_bbox": 0.06884, "loss_cls": 0.30076, "acc": 90.59875, "loss_bbox": 0.32031, "loss_mask": 0.32764, "loss": 1.07659, "time": 1.07646}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.0002, "memory": 19844, "data_time": 0.27271, "loss_rpn_cls": 0.05589, "loss_rpn_bbox": 0.06638, "loss_cls": 0.29665, "acc": 90.46106, "loss_bbox": 0.32174, "loss_mask": 0.32947, "loss": 1.07013, "time": 1.09845}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.0002, "memory": 19844, "data_time": 0.28766, "loss_rpn_cls": 0.05294, "loss_rpn_bbox": 0.06978, "loss_cls": 0.2957, "acc": 90.60046, "loss_bbox": 0.31859, "loss_mask": 0.32329, "loss": 1.06029, "time": 1.08588}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.0002, "memory": 19844, "data_time": 0.24747, "loss_rpn_cls": 0.05374, "loss_rpn_bbox": 0.06429, "loss_cls": 0.28647, "acc": 90.95325, "loss_bbox": 0.30613, "loss_mask": 0.31935, "loss": 1.02997, "time": 1.05883}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.0002, "memory": 19844, "data_time": 0.24041, "loss_rpn_cls": 0.05458, "loss_rpn_bbox": 0.06768, "loss_cls": 0.29216, "acc": 90.67896, "loss_bbox": 0.31686, "loss_mask": 0.32039, "loss": 1.05168, "time": 1.09743}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.0002, "memory": 19844, "data_time": 0.28416, "loss_rpn_cls": 0.05934, "loss_rpn_bbox": 0.07184, "loss_cls": 0.30063, "acc": 90.39172, "loss_bbox": 0.32857, "loss_mask": 0.32539, "loss": 1.08577, "time": 1.10315}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.0002, "memory": 19844, "data_time": 0.25074, "loss_rpn_cls": 0.05342, "loss_rpn_bbox": 0.06666, "loss_cls": 0.29205, "acc": 90.6969, "loss_bbox": 0.31618, "loss_mask": 0.32081, "loss": 1.04913, "time": 1.07572}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.0002, "memory": 19844, "data_time": 0.22201, "loss_rpn_cls": 0.05271, "loss_rpn_bbox": 0.06723, "loss_cls": 0.29271, "acc": 90.61011, "loss_bbox": 0.31963, "loss_mask": 0.31929, "loss": 1.05158, "time": 1.05121}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.0002, "memory": 19844, "data_time": 0.23375, "loss_rpn_cls": 0.05479, "loss_rpn_bbox": 0.06865, "loss_cls": 0.30231, "acc": 90.42847, "loss_bbox": 0.32214, "loss_mask": 0.324, "loss": 1.07188, "time": 1.07476}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.0002, "memory": 19844, "data_time": 0.25211, "loss_rpn_cls": 0.05404, "loss_rpn_bbox": 0.06593, "loss_cls": 0.29216, "acc": 90.72107, "loss_bbox": 0.31237, "loss_mask": 0.3171, "loss": 1.0416, "time": 1.06263}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.0002, "memory": 19844, "data_time": 0.22503, "loss_rpn_cls": 0.05179, "loss_rpn_bbox": 0.06535, "loss_cls": 0.28744, "acc": 90.7312, "loss_bbox": 0.31532, "loss_mask": 0.3208, "loss": 1.0407, "time": 1.06278}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.0002, "memory": 19844, "data_time": 0.23732, "loss_rpn_cls": 0.05174, "loss_rpn_bbox": 0.06595, "loss_cls": 0.28419, "acc": 90.91724, "loss_bbox": 0.30958, "loss_mask": 0.32374, "loss": 1.0352, "time": 1.07886}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.0002, "memory": 19844, "data_time": 0.24567, "loss_rpn_cls": 0.05503, "loss_rpn_bbox": 0.06756, "loss_cls": 0.28245, "acc": 90.82068, "loss_bbox": 0.31334, "loss_mask": 0.3217, "loss": 1.04009, "time": 1.09929}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.0002, "memory": 19844, "data_time": 0.22594, "loss_rpn_cls": 0.05369, "loss_rpn_bbox": 0.06971, "loss_cls": 0.27769, "acc": 90.9801, "loss_bbox": 0.30983, "loss_mask": 0.31599, "loss": 1.02691, "time": 1.07786}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.0002, "memory": 19844, "data_time": 0.24894, "loss_rpn_cls": 0.05238, "loss_rpn_bbox": 0.06453, "loss_cls": 0.2848, "acc": 90.79761, "loss_bbox": 0.31305, "loss_mask": 0.31429, "loss": 1.02905, "time": 1.08654}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.0002, "memory": 19844, "data_time": 0.25578, "loss_rpn_cls": 0.05402, "loss_rpn_bbox": 0.06781, "loss_cls": 0.28458, "acc": 90.84656, "loss_bbox": 0.31319, "loss_mask": 0.31784, "loss": 1.03745, "time": 1.10799}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.0002, "memory": 19844, "data_time": 0.22465, "loss_rpn_cls": 0.05082, "loss_rpn_bbox": 0.06571, "loss_cls": 0.27769, "acc": 91.00903, "loss_bbox": 0.30645, "loss_mask": 0.31317, "loss": 1.01385, "time": 1.08998}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.0002, "memory": 19844, "data_time": 0.22884, "loss_rpn_cls": 0.05134, "loss_rpn_bbox": 0.06337, "loss_cls": 0.28415, "acc": 90.9563, "loss_bbox": 0.31095, "loss_mask": 0.31759, "loss": 1.02741, "time": 1.06176}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.0002, "memory": 19844, "data_time": 0.22294, "loss_rpn_cls": 0.05122, "loss_rpn_bbox": 0.06479, "loss_cls": 0.27397, "acc": 91.16736, "loss_bbox": 0.29887, "loss_mask": 0.31407, "loss": 1.00292, "time": 1.09285}
