2024-06-05 17:22:24,037 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.10.0 (default, Mar  3 2022, 09:58:08) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 4090 D
CUDA_HOME: /usr/local/cuda-12.2
NVCC: Cuda compilation tools, release 12.2, V12.2.140
GCC: gcc (Ubuntu 12.3.0-1ubuntu1~22.04) 12.3.0
PyTorch: 1.12.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.0+cu113
OpenCV: 4.9.0
MMCV: 1.6.1
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMDetection: 2.25.1+4bb7153
------------------------------------------------------------

2024-06-05 17:22:24,292 - mmdet - INFO - Distributed training: True
2024-06-05 17:22:24,692 - mmdet - INFO - Config:
model = dict(
    type='MaskRCNN',
    pretrained='torchvision://resnet50',
    backbone=dict(
        type='efficientformer_l1_feat',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='../weights/efficientformer_l1_300d.pth')),
    neck=dict(
        type='FPN',
        in_channels=[48, 96, 224, 448],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=80,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_train2017.json',
        img_prefix='data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(metric=['bbox', 'segm'])
optimizer = dict(type='AdamW', lr=0.0002, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=1e-06,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/mask_rcnn_efficientformer_l1_fpn_1x_coco'
auto_resume = False
gpu_ids = range(0, 4)

2024-06-05 17:22:24,692 - mmdet - INFO - Set random seed to 0, deterministic: False
2024-06-05 17:22:25,083 - mmdet - INFO - load checkpoint from local path: ../weights/efficientformer_l1_300d.pth
2024-06-05 17:22:25,595 - mmdet - INFO - load checkpoint from local path: ../weights/efficientformer_l1_300d.pth
2024-06-05 17:22:25,805 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2024-06-05 17:22:25,824 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2024-06-05 17:22:25,829 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.patch_embed.0.weight - torch.Size([24, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.0.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.1.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.1.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.3.weight - torch.Size([48, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.3.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.4.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.patch_embed.4.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.layer_scale_1 - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.layer_scale_2 - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.mlp.fc1.weight - torch.Size([192, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.mlp.fc1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.mlp.fc2.weight - torch.Size([48, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.mlp.fc2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.mlp.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.mlp.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.mlp.norm2.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.0.mlp.norm2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.layer_scale_1 - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.layer_scale_2 - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.mlp.fc1.weight - torch.Size([192, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.mlp.fc1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.mlp.fc2.weight - torch.Size([48, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.mlp.fc2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.mlp.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.mlp.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.mlp.norm2.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.1.mlp.norm2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.layer_scale_1 - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.layer_scale_2 - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.mlp.fc1.weight - torch.Size([192, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.mlp.fc1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.mlp.fc2.weight - torch.Size([48, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.mlp.fc2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.mlp.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.mlp.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.mlp.norm2.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.0.2.mlp.norm2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.1.proj.weight - torch.Size([96, 48, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.1.proj.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.1.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.1.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.layer_scale_1 - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.layer_scale_2 - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.mlp.fc1.weight - torch.Size([384, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.mlp.fc1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.mlp.fc2.weight - torch.Size([96, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.mlp.fc2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.mlp.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.mlp.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.mlp.norm2.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.0.mlp.norm2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.layer_scale_1 - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.layer_scale_2 - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.mlp.fc1.weight - torch.Size([384, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.mlp.fc1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.mlp.fc2.weight - torch.Size([96, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.mlp.fc2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.mlp.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.mlp.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.mlp.norm2.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.2.1.mlp.norm2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.3.proj.weight - torch.Size([224, 96, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.3.proj.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.3.norm.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.3.norm.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.layer_scale_1 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.layer_scale_2 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.mlp.fc1.weight - torch.Size([896, 224, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.mlp.fc1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.mlp.fc2.weight - torch.Size([224, 896, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.mlp.fc2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.mlp.norm1.weight - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.mlp.norm1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.mlp.norm2.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.0.mlp.norm2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.layer_scale_1 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.layer_scale_2 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.mlp.fc1.weight - torch.Size([896, 224, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.mlp.fc1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.mlp.fc2.weight - torch.Size([224, 896, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.mlp.fc2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.mlp.norm1.weight - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.mlp.norm1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.mlp.norm2.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.1.mlp.norm2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.layer_scale_1 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.layer_scale_2 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.mlp.fc1.weight - torch.Size([896, 224, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.mlp.fc1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.mlp.fc2.weight - torch.Size([224, 896, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.mlp.fc2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.mlp.norm1.weight - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.mlp.norm1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.mlp.norm2.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.2.mlp.norm2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.layer_scale_1 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.layer_scale_2 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.mlp.fc1.weight - torch.Size([896, 224, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.mlp.fc1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.mlp.fc2.weight - torch.Size([224, 896, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.mlp.fc2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.mlp.norm1.weight - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.mlp.norm1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.mlp.norm2.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.3.mlp.norm2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.layer_scale_1 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.layer_scale_2 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.mlp.fc1.weight - torch.Size([896, 224, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.mlp.fc1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.mlp.fc2.weight - torch.Size([224, 896, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.mlp.fc2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.mlp.norm1.weight - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.mlp.norm1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.mlp.norm2.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.4.mlp.norm2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.layer_scale_1 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.layer_scale_2 - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.mlp.fc1.weight - torch.Size([896, 224, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.mlp.fc1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.mlp.fc2.weight - torch.Size([224, 896, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.mlp.fc2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.mlp.norm1.weight - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.mlp.norm1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.mlp.norm2.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.4.5.mlp.norm2.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.5.proj.weight - torch.Size([448, 224, 3, 3]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.5.proj.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.5.norm.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.5.norm.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.layer_scale_1 - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.layer_scale_2 - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.mlp.fc1.weight - torch.Size([1792, 448, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.mlp.fc1.bias - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.mlp.fc2.weight - torch.Size([448, 1792, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.mlp.fc2.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.mlp.norm1.weight - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.mlp.norm1.bias - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.mlp.norm2.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.0.mlp.norm2.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.layer_scale_1 - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.layer_scale_2 - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.mlp.fc1.weight - torch.Size([1792, 448, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.mlp.fc1.bias - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.mlp.fc2.weight - torch.Size([448, 1792, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.mlp.fc2.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.mlp.norm1.weight - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.mlp.norm1.bias - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.mlp.norm2.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.1.mlp.norm2.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.layer_scale_1 - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.layer_scale_2 - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.mlp.fc1.weight - torch.Size([1792, 448, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.mlp.fc1.bias - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.mlp.fc2.weight - torch.Size([448, 1792, 1, 1]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.mlp.fc2.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.mlp.norm1.weight - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.mlp.norm1.bias - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.mlp.norm2.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.2.mlp.norm2.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.layer_scale_1 - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.layer_scale_2 - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.norm1.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.norm1.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.token_mixer.attention_biases_seg - torch.Size([8, 625]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.token_mixer.qkv.weight - torch.Size([1536, 448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.token_mixer.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.token_mixer.proj.weight - torch.Size([448, 1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.token_mixer.proj.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.norm2.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.norm2.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.mlp.fc1.weight - torch.Size([1792, 448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.mlp.fc1.bias - torch.Size([1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.mlp.fc2.weight - torch.Size([448, 1792]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.network.6.4.mlp.fc2.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.norm0.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.norm0.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.norm2.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.norm2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.norm4.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.norm4.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.norm6.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.norm6.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.0.conv.weight - torch.Size([256, 48, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 96, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 224, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 448, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([81, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([81]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([320, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([320]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([80, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([80]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2024-06-05 17:22:51,689 - mmdet - INFO - Start running, host: expuser@xmu-SMRI, work_dir: /home/expuser/Documents/EfficientFormer/detection/work_dirs/mask_rcnn_efficientformer_l1_fpn_1x_coco
2024-06-05 17:22:51,689 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-06-05 17:22:51,690 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2024-06-05 17:22:51,690 - mmdet - INFO - Checkpoints will be saved to /home/expuser/Documents/EfficientFormer/detection/work_dirs/mask_rcnn_efficientformer_l1_fpn_1x_coco by HardDiskBackend.
